

var darkVador = ['villain', 'half human half machine'];

Q1. Is the darkVador variable (as defined above) a javascript object?

Answer: Yes, because arrays are objects

-------------------------------------------------------


var michel = {
   job: 'Your teacher',
   title: 'Professor',
   employer: 'University of Nice, France'
};

Q2. Which or these will display the name of Michel's employer? (3 correct answers!)

A. console.log("Michel's employer: " + michel.employer);
B. console.log("Michel's employer: " + michel['employer']);
C. console.log("Michel's employer: " + michel[employer]);
D. console.log("Michel's employer: " + michel["employer"]);
E. console.log("Michel's employer: " + michel[2]);

Answer: A, B, and D, michel.employer, michel with 'employer' between brackets 
	or michel with "employer" between brackets will work.

---------------------------------------------------------

var michel = {
   job: 'Your teacher',
   title: 'Professor',
   employer: 'University of Nice, France'
};

// We put the name of a property of michel in the variable p
var p = 'job';

// we call a function that will display the value of the property p of the object
// passed as the first agrument
displayPropertyValue(michel, p);

function displayPropertyValue(object, prop) {
    // What would you put below instead of XXX?
	console.log("Value of the property named" + prop + ": " + XXX);
}


Q3. In the above code, what would you put instead of XXX in the instruction located in the body 
    of the function named displayPropertyValue?

A. object['prop']
B. object[prop] 
C. object.prop

Answer: B, because its a class case where the name of a property is in a variable

-----------------------------------------------------------

var medor = {
    name: 'Benji',
    bark: function(){
        alert('Ouarf, Ouarf!');
    }
};

Q4. In this object (described above), we have one property and one method. Please check what is true below?

A. name is the property and bark is a property and a method 
B. name is the method, bark is a property

Answer: Its A, because a property can be a function, in which case it is called a method.
	bark is the method and name is the property

-------------------------------------------------------------

var pictures = [
  {
    "albumId": 1,
    "id": 1,
    author: {
        "name":"michel",
        "job": "Professor"
    },
    "title": "Holidays in Roma",
    "url": "http://placehold.it/600/92c952",
    "thumbnailUrl": "http://placehold.it/150/92c952"
  },
  {
    "albumId": 1,
    "id": 2,
    author: {
        "name":"Marie Claire",
        "job": "Michel's Boss!"
    },
    "title": "Eating an ice cream at the Coliseum",
    "url": "http://placehold.it/600/771796",
    "thumbnailUrl": "http://placehold.it/150/771796"
  }
];


console.log("Name of the author of the second picture: " + XXX);


Q5. what would you put in the above console.log instruction instead of XXX  
    (you need to type the JavaScript code, not the string result, if needed use simple quotes,
    not double quotes that confuse the quizz tool):

Answer: pictures[1].author.name; or pictures[1].author['name']; or pictures[1].author["name"];
	
	The second picture is and index 1 and the author is an object that has a property called name.
	The answer is "pictures followed by brackets with the index 1 inside, followed by .author.name".


----------------------------------------------------------------------------


Q6. How would you print the number of characters of the first picture's title?

A. pictures[0].length.title
B. pictures[0].title.length
C. pictures[1].length
D. pictures[1].title.length

Answer: B, because pictures is an array, and the first picture is at index 0. title is a property,
	and its a string, and strings have a length property.
	 
-----------------------------------------------------------------------------


var player = {
  x:10,
  y:10,
  
  move: function(xNew, yNew) {
    x = xNew;
    y = yNew;
  }

Q7. Will the execution of player.move(10, 10); change the values of the players x and y properties?

Answer: No, a method such as move, access the properties of an object using the "this" keyword. 
	We should have written this.x = xNew; and this.y = ynew; instead of x = xNew; and y = yNew;

-----------------------------------------------------------------------------


var player = {};
player.x = 10;
player.y = 10;


Q8. is the above code valid?

Answer: Yes, it is equivalent to....
	
	var player = {
		x:10,
		y:10
	} 

-------------------------------------------------------------------------------


function Person(name, age) {
    this.name = name;
    this.age = age;
    this.describe = function() {
        console.log("I'm " + this.name + ", my age is " + this.age);
    }
}

var p1 = new Person("Michel", 52);
p1.describe();
var p2 = new Person("Marie Claire", "unknown, a lady never gives its age");
p2.describe();

Q9. In the above code, person is:
	
Answer: A constructor function, The syntax is the same as for creating a function, 
	except that the name its capitalized. Also, build new objects using the 
	"new" keyword.

-------------------------------------------------------------------------------



function Person(name, age) {
    this.name = name;
    this.age = age;
    this.describe = function() {
        console.log("I'm " + name + ", my age is " + this.age);
    }
}

var p1 = new Person("Michel", 52);
var p2 = new Person("Marie-Claire", "unknown, a lady never gives her age");
p1.name = "John";
p1.age = 22;
p2.describe();

Q10. In the above code, what will be displayed in the devtool console?

A. I'm John, my age is 22
B. I'm Marie-Claire, my age is unknown, a lady never gives her age

Answer: B

-------------------------------------------------------------------------------



class Hero {
    this.name = name; // property
    this.side = side; // property

    function speak() { // method, no more "function"
        return "<p>My name is " + this.name +
               ", I'm with the " + this.side + ".</p>";
    }
}
 
var darkVador = new Hero("Dark Vador", "empire");


Q11. There are two errors in the code of the class Hero above. Indicate which ones in the list below

A. There are no arguments passed to the speak method
B. The method speak should not be preceded by the keyword function
C. There is no constructor
D. There are missing parentheses after the name of the class with two arguments inside: Hero(name, side)
E. A method cannot return a value

Answer: B and C, A method in ES6 should not be declared with the keyword function. In order to set a value
	to the name and side properties, the Hero class should have a constructor. 

-------------------------------------------------------------------------------

function getHero(name, side){
	return{
		name: name,
		side: side
	}
}

let luke = getHero("Luke", "Rebels");
console.log("Luke's side is " + XXX);

Q12. In the above code, what would you write instead of XXX, to display Luke's side on the devtool console?

Answer: luke.side 

--------------------------------------------------------------------------------

let x = sum(3, 5);

function sum(x, y){
	return(x + y);
}

Q13. The function sum is declared after we called it at the first line of the above code. Is this correct? Will it work?

Answer: Yes, Can call a function BEFORE it has been declared in your source code. This is called "hosting": 
	its like if all function declarations were moved to the top before being executed. 

---------------------------------------------------------------------------------


var p = new Persons();

class Persons{...}


Q14. The class Person is declared after being used at the first line of the above code. Is this correct? Will it work?

Answer: No, Classes must be declared BEFORE using them. 
	An important difference between function declarations and class declarations is 
	that function declarations are "hoisted" and class declarations are not. It means that 
	you can call a function BEFORE it has been declared in the source code.

	First need to declare your class and then access it, otherwisse a line of code, such as
	the one shown in the example will give an error.

-----------------------------------------------------------------------------------


function f(name, side) {
    return { 
        name: name.toUpperCase(),
        side: side.toLowerCase()
    }
}
let luke = f("Luke Skywalker", "Rebels");


Q15. How do we call the above function

A. Its just a function that returns an object, nothing special
B. A factory
C. A builder

Answer: B, Objects can also be created by functions that return objects we call them "factories".


------------------------------------------------------------------------------


Q16. A class property defines a characteristic of the. ES6 class itself, not of the objects instances of this class. 
Only one of the following is true, check it!

A. Class properties are useless and should be avoided -- in the course we don't recommend to use them.
B. An ES6 class property should be declared after the class, using the name of the class followed by the . operator 
C. An ES6 class property can be used only in class methods, not in instance methods
D. An ES6 class property is declared in the class, like any other properties, but we use the keyword "static" before declaring it

Answer: B, Class properties should be defined after the class function, and declared using the name of the class
	followed by the .operator and the name of the property.
	Example: Point.nbPointsCreated

------------------------------------------------------------------------------


Q17. A class method defines a behavior of the ES6 class itself, not of the objects' instances of this class. 
	Only one of the following is true, check it!

A. An ES6 class method can be called using the name of an instance followed by the . operator, followed by the name of the method
B. An ES6 class method is declared in the class, like any other method, but we use the keyword "static" before declaring it
C. An ES6 class method can work with class properties and with instance properties

Answer: B, The static keyword defines a static method for a class
	Static methods are called without instatiatin  their class and cannot be called through a class instance
	Static methods are called without instantiating their class and cannot be called through a class instance.

	Consequence: do not use instance properties in their body!

	Static methods are often used to create utility functions for an applicatios.



















































